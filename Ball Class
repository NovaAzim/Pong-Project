import java.awt.Rectangle;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;

public class Ball extends Rectangle {
    int dX, dY;
    int countDown;
    public Ball(int w, int h) {
        super(400,600,w,h);
        dX = (int)(Math.random()*10)+5;
        dY = (int)(Math.random()*10)+5;
    }
    public void move(Ball ball, Paddle paddle, Paddle paddleTwo) {

        if((getY()+10) > 800) {
            dY = (int)(Math.random() *-10) -5;
        }
        if((getX()+10) > 1200) {
            dX = 0;
            dY = 0;
        }
        if((getX()+10) < 0) {
            dX = 0;
            dY = 0;
        }
        if((getY()+10) < 0) {
            dY = (int)(Math.random() *10) +5;
        }
        if(ball.intersects(paddle)) {
            ball.dX = (int)(Math.random() * -10) - 5;

        }
        if (ball.intersects(paddleTwo)) {
            ball.dX = (int)(Math.random() * 10) + 1;
        }
        this.translate(dX,dY);
    }
    public void resetBall(Paddle paddle) {
        this.x = (GDV5.getMaxWindowX()/2);
        this.y = paddle.y;
        dX = 0;
        dY = 0;
        countDown = 3;
        final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
        final Runnable runnable = new Runnable() {
            public void run() {
                countDown--;
                if(countDown == 0) {
                    dX = 7;
                    dY = 7;
                    scheduler.shutdown();
                }
            }
        };
        scheduler.scheduleAtFixedRate(runnable,2,1,java.util.concurrent.TimeUnit.SECONDS);
    }

}
